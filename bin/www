#!/usr/bin/env node
import app from "../app.js";
import http from "http";
import mongoose, { set } from "mongoose";
import debug from "debug";

const debugServer = debug("Server:");
const port = normalizePort(process.env.PORT || "3000");
app.set("port", port);

const server = http.createServer(app); // Create HTTP server with the Express app

server.listen(port); // Make the server listen on the port
server.on("error", onError); // Add error handler
server.on("listening", onListening); // Add listening handler

function normalizePort(val) {
  const port = parseInt(val, 10);
  if (isNaN(port)) {
    return val;
  }
  if (port >= 0) {
    return port;
  }
  return false;
}

function onError(error) {
  if (error.syscall !== "listen") {
    throw error;
  }
  const bind = typeof port === "string" ? "Pipe " + port : "Port " + port;
  switch (error.code) {
    case "EACCES":
      console.error(bind + " requires elevated privileges");
      process.exit(1);
      break;
    case "EADDRINUSE":
      console.error(bind + " is already in use");
      process.exit(1);
      break;
    default:
      throw error;
  }
}

function onListening() {
  const addr = server.address();
  const bind = typeof addr === "string" ? "pipe " + addr : "port " + addr.port;
  debugServer("Listening on " + bind);
}

function gracefullyShutDown() {
  server.close(async (err) => {
    if (err) {
      console.log(err);
    }
    await mongoose.connection.close();
    debugServer("MongoDB connection closed");
    debugServer("HTTP server closed");
    process.exit(0);
  });

  setTimeout(() => {
    console.error(
      "Could not close connections in time, forcefully shutting down"
    );
    process.exit(1);
  }, 10000);
}

process.on("SIGINT", gracefullyShutDown).on("SIGTERM", gracefullyShutDown);
